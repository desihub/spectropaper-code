#!/usr/bin/env python


import sys,os
import argparse
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib import ticker
import numpy as np

from astropy.table import Table

cmap=plt.cm.gray


fig=plt.figure("focal_plane_twilight_brz",figsize=(7,3))
#fig, ax = plt.subplots(1, 4, gridspec_kw={'width_ratios': [1, 1, 1,0.1]},figsize=(7,3),num="focal_plane_twilight_brz")
#plt.subplot(


for i,cam in enumerate(["b","r","z"]) :
    filename=f"focal_plane_twilight_{cam}.csv"
    t=Table.read(filename)
    x=t["X"]
    y=t["Y"]
    z=t["F"]

    vmin=1-0.045
    vmax=1+0.045

    #axi=ax[i]
    axi=fig.add_axes([0.3*i, 0, 0.3, 1])

    axi.scatter(x,y,c=z,vmin=vmin,vmax=vmax,s=7,edgecolors="face",cmap=cmap)
    axi.axis("off")
    axi.set_title(cam)

norm=mpl.colors.Normalize(vmin=vmin,vmax=vmax)
#ax[3].axis("off")
axi=fig.add_axes([0.3*3, 0.05, 0.02, 0.9])
cb=mpl.colorbar.ColorbarBase(axi,norm=norm,orientation='vertical',cmap=cmap)
tick_locator = ticker.MaxNLocator(nbins=5)
cb.locator = tick_locator
cb.update_ticks()
cb.ax.tick_params(labelsize=14)

'''

if args.focal_plane :
    x=np.hstack(x)
    y=np.hstack(y)
    z=np.hstack(z)
    ii = (z!=0)
    if args.norm :
        z /= np.median(z[ii])
        ii = (z>0.5)
    fig = plt.figure("focal_plane_twilight",figsize=(4.9,4))
    axcb  = fig.add_axes([0.8, 0.05, 0.05, 0.9])
    aximg = fig.add_axes([0.05, 0.05, 0.75, 0.9])
    mz=np.median(z[ii])
    rmsz=1.4*np.median(np.abs(z[ii]-mz))
    if args.vmin is not None:
        vmin = args.vmin
    else :
        vmin=mz-3*rmsz
    if args.vmax is not None:
        vmax = args.vmax
    else :
        vmax=mz+3*rmsz

    aximg.scatter(x[ii],y[ii],c=z[ii],vmin=vmin,vmax=vmax,s=7,edgecolors="face",cmap=cmap)
    aximg.axis("off")
    # aximg.xaxis.set_ticks([])
    # aximg.yaxis.set_ticks([])
    norm=mpl.colors.Normalize(vmin=vmin,vmax=vmax)
    cb=mpl.colorbar.ColorbarBase(axcb,norm=norm,orientation='vertical',cmap=cmap)
    #cb=plt.colorbar()
    tick_locator = ticker.MaxNLocator(nbins=5)
    cb.locator = tick_locator
    cb.update_ticks()
    cb.ax.tick_params(labelsize=14)


    if args.output_focal_plane is not None :
        from astropy.table import Table
        t=Table()
        t["X"]=x
        t["Y"]=y
        t["F"]=z
        t.write(args.output_focal_plane,overwrite=True)
        print("wrote",args.output_focal_plane)

if args.outfile is not None :
    fig.savefig(args.outfile)
    print("wrote {}".format(args.outfile))

if args.focal_plane and args.radial :
    plt.figure("radial")
    r=np.sqrt(x**2+y**2)
    plt.plot(r[ii],z[ii],".",alpha=0.6)
    plt.ylim([vmin,vmax])
'''

plt.show()
